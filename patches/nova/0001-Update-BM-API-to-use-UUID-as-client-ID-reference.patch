From 3f56d769ab681b646f45b3062bfed63a494dd246 Mon Sep 17 00:00:00 2001
From: Martyn Taylor <mtaylor@redhat.com>
Date: Sun, 4 Aug 2013 12:51:40 +0100
Subject: [PATCH] Update BM API to use UUID as client ID reference

Reworks the Nova Bare Metal driver API to accept and return the UUIDs
instead of the database ID for Bare Metal Nodes.  This matches other
areas of the Nova API and is also useful when using the force_node
functionality as this requires UUID as input.

Fixes bug 1184447

Change-Id: I8e04ddf31d8aa47c509ef799daea206e5cf3256f
---
 .../openstack/compute/contrib/baremetal_nodes.py   |  31 +++---
 .../compute/contrib/test_baremetal_nodes.py        | 113 ++++++++++++---------
 nova/tests/integrated/test_api_samples.py          |  14 ++-
 nova/tests/virt/baremetal/db/test_bm_node.py       |  15 +++
 nova/virt/baremetal/db/api.py                      |   4 +
 nova/virt/baremetal/db/sqlalchemy/api.py           |  22 ++++
 6 files changed, 130 insertions(+), 69 deletions(-)

diff --git a/nova/api/openstack/compute/contrib/baremetal_nodes.py b/nova/api/openstack/compute/contrib/baremetal_nodes.py
index 6f932e7..4cf51a8 100644
--- a/nova/api/openstack/compute/contrib/baremetal_nodes.py
+++ b/nova/api/openstack/compute/contrib/baremetal_nodes.py
@@ -37,7 +37,7 @@ interface_fields = ['id', 'address', 'datapath_id', 'port_no']
 def _node_dict(node_ref):
     d = {}
     for f in node_fields:
-        d[f] = node_ref.get(f)
+        d[f] = node_ref.get(f) if not f == "id" else node_ref.get("uuid")
     return d
 
 
@@ -115,13 +115,15 @@ class BareMetalNodeController(wsgi.Controller):
         context = req.environ['nova.context']
         authorize(context)
         try:
-            node = db.bm_node_get(context, id)
-        except exception.NodeNotFound:
+            node = db.bm_node_get_by_node_uuid(context, id)
+        except exception.NodeNotFoundByUUID:
             raise webob.exc.HTTPNotFound()
+
         try:
-            ifs = db.bm_interface_get_all_by_bm_node_id(context, id)
+            ifs = db.bm_interface_get_all_by_bm_node_id(context, node['id'])
         except exception.NodeNotFound:
             ifs = []
+
         node = _node_dict(node)
         node['interfaces'] = [_interface_dict(i) for i in ifs]
         return {'node': node}
@@ -133,10 +135,11 @@ class BareMetalNodeController(wsgi.Controller):
         values = body['node'].copy()
         prov_mac_address = values.pop('prov_mac_address', None)
         node = db.bm_node_create(context, values)
+        id = node.get('id')
         node = _node_dict(node)
         if prov_mac_address:
             if_id = db.bm_interface_create(context,
-                                           bm_node_id=node['id'],
+                                           bm_node_id=id,
                                            address=prov_mac_address,
                                            datapath_id=None,
                                            port_no=None)
@@ -150,15 +153,15 @@ class BareMetalNodeController(wsgi.Controller):
         context = req.environ['nova.context']
         authorize(context)
         try:
-            db.bm_node_destroy(context, id)
-        except exception.NodeNotFound:
+            db.bm_node_destroy_by_node_uuid(context, id)
+        except exception.NodeNotFoundByUUID:
             raise webob.exc.HTTPNotFound()
         return webob.Response(status_int=202)
 
-    def _check_node_exists(self, context, node_id):
+    def _check_node_exists(self, context, node_uuid):
         try:
-            db.bm_node_get(context, node_id)
-        except exception.NodeNotFound:
+            return db.bm_node_get_by_node_uuid(context, node_uuid)
+        except exception.NodeNotFoundByUUID:
             raise webob.exc.HTTPNotFound()
 
     @wsgi.serializers(xml=InterfaceTemplate)
@@ -166,13 +169,13 @@ class BareMetalNodeController(wsgi.Controller):
     def _add_interface(self, req, id, body):
         context = req.environ['nova.context']
         authorize(context)
-        self._check_node_exists(context, id)
+        node = self._check_node_exists(context, id)
         body = body['add_interface']
         address = body['address']
         datapath_id = body.get('datapath_id')
         port_no = body.get('port_no')
         if_id = db.bm_interface_create(context,
-                                       bm_node_id=id,
+                                       bm_node_id=node['id'],
                                        address=address,
                                        datapath_id=datapath_id,
                                        port_no=port_no)
@@ -184,14 +187,14 @@ class BareMetalNodeController(wsgi.Controller):
     def _remove_interface(self, req, id, body):
         context = req.environ['nova.context']
         authorize(context)
-        self._check_node_exists(context, id)
+        node = self._check_node_exists(context, id)
         body = body['remove_interface']
         if_id = body.get('id')
         address = body.get('address')
         if not if_id and not address:
             raise webob.exc.HTTPBadRequest(
                     explanation=_("Must specify id or address"))
-        ifs = db.bm_interface_get_all_by_bm_node_id(context, id)
+        ifs = db.bm_interface_get_all_by_bm_node_id(context, node['id'])
         for i in ifs:
             if if_id and if_id != i['id']:
                 continue
diff --git a/nova/tests/api/openstack/compute/contrib/test_baremetal_nodes.py b/nova/tests/api/openstack/compute/contrib/test_baremetal_nodes.py
index e5fd858..ed34707 100644
--- a/nova/tests/api/openstack/compute/contrib/test_baremetal_nodes.py
+++ b/nova/tests/api/openstack/compute/contrib/test_baremetal_nodes.py
@@ -48,33 +48,37 @@ class BareMetalNodesTest(test.NoDBTestCase):
             'pm_password': "pm_pass",
             'terminal_port': 8000,
             'interfaces': [],
+            'uuid': '12345678-1234-1234-1234-1234567890ab'
         }
         response = node.copy()
-        response['id'] = 100
+        response['id'] = response['uuid']
         del response['pm_password']
         response['instance_uuid'] = None
         self.mox.StubOutWithMock(db, 'bm_node_create')
         db.bm_node_create(self.context, node).AndReturn(response)
         self.mox.ReplayAll()
         res_dict = self.controller.create(self.request, {'node': node})
+        del response['uuid']
         self.assertEqual({'node': response}, res_dict)
 
     def test_delete(self):
-        self.mox.StubOutWithMock(db, 'bm_node_destroy')
-        db.bm_node_destroy(self.context, 1)
+        node_uuid = '12345678-1234-1234-1234-1234567890ab'
+        self.mox.StubOutWithMock(db, 'bm_node_destroy_by_node_uuid')
+        db.bm_node_destroy_by_node_uuid(self.context, node_uuid)
         self.mox.ReplayAll()
-        self.controller.delete(self.request, 1)
+        self.controller.delete(self.request, node_uuid)
 
     def test_delete_node_not_found(self):
-        self.mox.StubOutWithMock(db, 'bm_node_destroy')
-        db.bm_node_destroy(self.context, 1).\
-                AndRaise(exception.NodeNotFound(node_id=1))
+        node_uuid = '12345678-1234-1234-1234-1234567890ab'
+        self.mox.StubOutWithMock(db, 'bm_node_destroy_by_node_uuid')
+        db.bm_node_destroy_by_node_uuid(self.context, node_uuid).\
+                AndRaise(exception.NodeNotFoundByUUID(node_uuid=node_uuid))
         self.mox.ReplayAll()
         self.assertRaises(
                 exc.HTTPNotFound,
                 self.controller.delete,
                 self.request,
-                1)
+                node_uuid)
 
     def test_index(self):
         nodes = [{'id': 1},
@@ -97,44 +101,47 @@ class BareMetalNodesTest(test.NoDBTestCase):
         self.assertEqual(2, len(res_dict['nodes'][1]['interfaces']))
 
     def test_show(self):
-        node_id = 1
-        node = {'id': node_id}
+        node_uuid = '12345678-1234-1234-1234-1234567890ab'
+        node = {'uuid': node_uuid, 'id': 1}
         interfaces = [{'id': 1, 'address': '11:11:11:11:11:11'},
                       {'id': 2, 'address': '22:22:22:22:22:22'},
                       ]
-        self.mox.StubOutWithMock(db, 'bm_node_get')
+        self.mox.StubOutWithMock(db, 'bm_node_get_by_node_uuid')
         self.mox.StubOutWithMock(db, 'bm_interface_get_all_by_bm_node_id')
-        db.bm_node_get(self.context, node_id).AndReturn(node)
-        db.bm_interface_get_all_by_bm_node_id(self.context, node_id).\
+        db.bm_node_get_by_node_uuid(self.context, node_uuid).AndReturn(node)
+        db.bm_interface_get_all_by_bm_node_id(self.context, 1).\
                 AndReturn(interfaces)
         self.mox.ReplayAll()
-        res_dict = self.controller.show(self.request, node_id)
-        self.assertEqual(node_id, res_dict['node']['id'])
+        res_dict = self.controller.show(self.request, node_uuid)
+        self.assertEqual(node_uuid, res_dict['node']['id'])
         self.assertEqual(2, len(res_dict['node']['interfaces']))
 
     def test_show_no_interfaces(self):
+        node_uuid = '12345678-1234-1234-1234-1234567890ab'
         node_id = 1
-        node = {'id': node_id}
-        self.mox.StubOutWithMock(db, 'bm_node_get')
+        node = {'uuid': node_uuid, 'id': node_id}
+        self.mox.StubOutWithMock(db, 'bm_node_get_by_node_uuid')
         self.mox.StubOutWithMock(db, 'bm_interface_get_all_by_bm_node_id')
-        db.bm_node_get(self.context, node_id).AndReturn(node)
+        db.bm_node_get_by_node_uuid(self.context, node_uuid).AndReturn(node)
         db.bm_interface_get_all_by_bm_node_id(self.context, node_id).\
-                AndRaise(exception.NodeNotFound(node_id=node_id))
+                AndRaise(exception.NodeNotFound(node_id=node_uuid))
         self.mox.ReplayAll()
-        res_dict = self.controller.show(self.request, node_id)
-        self.assertEqual(node_id, res_dict['node']['id'])
+        res_dict = self.controller.show(self.request, node_uuid)
+        self.assertEqual(node_uuid, res_dict['node']['id'])
         self.assertEqual(0, len(res_dict['node']['interfaces']))
 
     def test_add_interface(self):
-        node_id = 1
+        node = {'id': 1,
+                'uuid': '12345678-1234-1234-1234-1234567890ab'}
         address = '11:22:33:44:55:66'
         body = {'add_interface': {'address': address}}
-        self.mox.StubOutWithMock(db, 'bm_node_get')
+        self.mox.StubOutWithMock(db, 'bm_node_get_by_node_uuid')
         self.mox.StubOutWithMock(db, 'bm_interface_create')
         self.mox.StubOutWithMock(db, 'bm_interface_get')
-        db.bm_node_get(self.context, node_id)
+        db.bm_node_get_by_node_uuid(self.context, node['uuid']).\
+                                    AndReturn(node)
         db.bm_interface_create(self.context,
-                               bm_node_id=node_id,
+                               bm_node_id=node['id'],
                                address=address,
                                datapath_id=None,
                                port_no=None).\
@@ -142,78 +149,84 @@ class BareMetalNodesTest(test.NoDBTestCase):
         db.bm_interface_get(self.context, 12345).\
                 AndReturn({'id': 12345, 'address': address})
         self.mox.ReplayAll()
-        res_dict = self.controller._add_interface(self.request, node_id, body)
+        res_dict = self.controller._add_interface(self.request,
+                                                  node['uuid'],
+                                                  body)
         self.assertEqual(12345, res_dict['interface']['id'])
         self.assertEqual(address, res_dict['interface']['address'])
 
     def test_remove_interface(self):
-        node_id = 1
+        node = {'id': 1,
+                'uuid': '12345678-1234-1234-1234-1234567890ab'}
         interfaces = [{'id': 1},
                       {'id': 2},
                       {'id': 3},
                       ]
         body = {'remove_interface': {'id': 2}}
-        self.mox.StubOutWithMock(db, 'bm_node_get')
+        self.mox.StubOutWithMock(db, 'bm_node_get_by_node_uuid')
         self.mox.StubOutWithMock(db, 'bm_interface_get_all_by_bm_node_id')
         self.mox.StubOutWithMock(db, 'bm_interface_destroy')
-        db.bm_node_get(self.context, node_id)
-        db.bm_interface_get_all_by_bm_node_id(self.context, node_id).\
+        db.bm_node_get_by_node_uuid(self.context, node['uuid']).\
+                                                       AndReturn(node)
+        db.bm_interface_get_all_by_bm_node_id(self.context, node['id']).\
                 AndReturn(interfaces)
         db.bm_interface_destroy(self.context, 2)
         self.mox.ReplayAll()
-        self.controller._remove_interface(self.request, node_id, body)
+        self.controller._remove_interface(self.request, node['uuid'], body)
 
     def test_remove_interface_by_address(self):
-        node_id = 1
+        node = {'id': 1,
+                'uuid': '12345678-1234-1234-1234-1234567890ab'}
         interfaces = [{'id': 1, 'address': '11:11:11:11:11:11'},
                       {'id': 2, 'address': '22:22:22:22:22:22'},
                       {'id': 3, 'address': '33:33:33:33:33:33'},
                       ]
-        self.mox.StubOutWithMock(db, 'bm_node_get')
+        self.mox.StubOutWithMock(db, 'bm_node_get_by_node_uuid')
         self.mox.StubOutWithMock(db, 'bm_interface_get_all_by_bm_node_id')
         self.mox.StubOutWithMock(db, 'bm_interface_destroy')
-        db.bm_node_get(self.context, node_id)
-        db.bm_interface_get_all_by_bm_node_id(self.context, node_id).\
+        db.bm_node_get_by_node_uuid(self.context, node['uuid']).\
+                AndReturn(node)
+        db.bm_interface_get_all_by_bm_node_id(self.context, node['id']).\
                 AndReturn(interfaces)
         db.bm_interface_destroy(self.context, 2)
         self.mox.ReplayAll()
         body = {'remove_interface': {'address': '22:22:22:22:22:22'}}
-        self.controller._remove_interface(self.request, node_id, body)
+        self.controller._remove_interface(self.request, node['uuid'], body)
 
     def test_remove_interface_no_id_no_address(self):
-        node_id = 1
-        self.mox.StubOutWithMock(db, 'bm_node_get')
-        db.bm_node_get(self.context, node_id)
+        node_uuid = '12345678-1234-1234-1234-1234567890ab'
+        self.mox.StubOutWithMock(db, 'bm_node_get_by_node_uuid')
+        db.bm_node_get_by_node_uuid(self.context, node_uuid)
         self.mox.ReplayAll()
         body = {'remove_interface': {}}
         self.assertRaises(exc.HTTPBadRequest,
                           self.controller._remove_interface,
                           self.request,
-                          node_id,
+                          node_uuid,
                           body)
 
     def test_add_interface_node_not_found(self):
-        node_id = 1
-        self.mox.StubOutWithMock(db, 'bm_node_get')
-        db.bm_node_get(self.context, node_id).\
-                AndRaise(exception.NodeNotFound(node_id=node_id))
+        node_uuid = '12345678-1234-1234-1234-1234567890ab'
+        self.mox.StubOutWithMock(db, 'bm_node_get_by_node_uuid')
+        db.bm_node_get_by_node_uuid(self.context, node_uuid).\
+                AndRaise(exception.NodeNotFoundByUUID(node_uuid=node_uuid))
         self.mox.ReplayAll()
         body = {'add_interface': {'address': '11:11:11:11:11:11'}}
         self.assertRaises(exc.HTTPNotFound,
                           self.controller._add_interface,
                           self.request,
-                          node_id,
+                          node_uuid,
                           body)
 
     def test_remove_interface_node_not_found(self):
-        node_id = 1
-        self.mox.StubOutWithMock(db, 'bm_node_get')
-        db.bm_node_get(self.context, node_id).\
-                AndRaise(exception.NodeNotFound(node_id=node_id))
+        node_uuid = '12345678-1234-1234-1234-1234567890ab'
+        self.mox.StubOutWithMock(db, 'bm_node_get_by_node_uuid')
+        db.bm_node_get_by_node_uuid(self.context, node_uuid).\
+                AndRaise(exception.NodeNotFoundByUUID(node_uuid=node_uuid))
         self.mox.ReplayAll()
         body = {'remove_interface': {'address': '11:11:11:11:11:11'}}
         self.assertRaises(exc.HTTPNotFound,
                           self.controller._remove_interface,
                           self.request,
-                          node_id,
+                          node_uuid,
                           body)
diff --git a/nova/tests/integrated/test_api_samples.py b/nova/tests/integrated/test_api_samples.py
index 586e1cb..6d84e97 100644
--- a/nova/tests/integrated/test_api_samples.py
+++ b/nova/tests/integrated/test_api_samples.py
@@ -2719,7 +2719,7 @@ class CellsCapacitySampleJsonTest(ApiSampleTestBaseV2):
                          "cell_capacities.Cell_capacities")
 
     def setUp(self):
-        self.flags(enable=True, db_check_interval=-1, group='cells')
+        self.flags(enable=True, db_check_interval=1, group='cells')
         super(CellsCapacitySampleJsonTest, self).setUp()
         # (navneetk/kaushikc) : Mock cell capacity to avoid the capacity
         # being calculated from the compute nodes in the environment
@@ -2769,7 +2769,8 @@ class BareMetalNodesJsonTest(ApiSampleTestBaseV2, bm_db_base.BMDBTestCase):
         response = self._do_post("os-baremetal-nodes",
                                  "baremetal-node-create-req",
                                  {})
-        subs = {'node_id': '(?P<id>\d+)'}
+        subs = {'node_id': '(?P<id>[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}'
+                  '-[0-9a-f]{4}-[0-9a-f]{12})'}
         return self._verify_response("baremetal-node-create-resp", subs,
                                      response, 200)
 
@@ -2779,7 +2780,8 @@ class BareMetalNodesJsonTest(ApiSampleTestBaseV2, bm_db_base.BMDBTestCase):
         response = self._do_post("os-baremetal-nodes",
                                  "baremetal-node-create-with-address-req",
                                  req_subs)
-        subs = {'node_id': '(?P<id>\d+)',
+        subs = {'node_id': '(?P<id>[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}'
+                  '-[0-9a-f]{4}-[0-9a-f]{12})',
                 'interface_id': '\d+',
                 'address': address}
         self._verify_response("baremetal-node-create-with-address-resp",
@@ -2795,7 +2797,8 @@ class BareMetalNodesJsonTest(ApiSampleTestBaseV2, bm_db_base.BMDBTestCase):
         node_id = self._create_node()
         interface_id = self._add_interface(node_id)
         response = self._do_get('os-baremetal-nodes')
-        subs = {'node_id': node_id,
+        subs = {'node_id': '(?P<id>[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}'
+                  '-[0-9a-f]{4}-[0-9a-f]{12})',
                 'interface_id': interface_id,
                 'address': 'aa:aa:aa:aa:aa:aa',
                 }
@@ -2806,7 +2809,8 @@ class BareMetalNodesJsonTest(ApiSampleTestBaseV2, bm_db_base.BMDBTestCase):
         node_id = self._create_node()
         interface_id = self._add_interface(node_id)
         response = self._do_get('os-baremetal-nodes/%s' % node_id)
-        subs = {'node_id': node_id,
+        subs = {'node_id': '(?P<id>[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}'
+                  '-[0-9a-f]{4}-[0-9a-f]{12})',
                 'interface_id': interface_id,
                 'address': 'aa:aa:aa:aa:aa:aa',
                 }
diff --git a/nova/tests/virt/baremetal/db/test_bm_node.py b/nova/tests/virt/baremetal/db/test_bm_node.py
index 0acd5a9..b9f57cb 100644
--- a/nova/tests/virt/baremetal/db/test_bm_node.py
+++ b/nova/tests/virt/baremetal/db/test_bm_node.py
@@ -42,9 +42,11 @@ class BareMetalNodesTestCase(base.BMDBTestCase):
                                memory_mb=2000, cpus=2, local_gb=1000),
         ]
         self.ids = []
+        self.uuids = []
         for n in nodes:
             ref = db.bm_node_create(self.context, n)
             self.ids.append(ref['id'])
+            self.uuids.append(ref['uuid'])
 
     def test_get_all(self):
         r = db.bm_node_get_all(self.context)
@@ -120,6 +122,19 @@ class BareMetalNodesTestCase(base.BMDBTestCase):
         r = db.bm_node_get_all(self.context)
         self.assertEquals(len(r), 5)
 
+    def test_destroy_by_node_uuid(self):
+        self._create_nodes()
+
+        db.bm_node_destroy_by_node_uuid(self.context, self.uuids[0])
+
+        self.assertRaises(
+              exception.NodeNotFoundByUUID,
+              db.bm_node_get_by_node_uuid,
+              self.context, self.uuids[0])
+
+        r = db.bm_node_get_all(self.context)
+        self.assertEquals(len(r), 5)
+
     def test_destroy_with_interfaces(self):
         self._create_nodes()
 
diff --git a/nova/virt/baremetal/db/api.py b/nova/virt/baremetal/db/api.py
index 3943b79..3c0f663 100644
--- a/nova/virt/baremetal/db/api.py
+++ b/nova/virt/baremetal/db/api.py
@@ -113,6 +113,10 @@ def bm_node_destroy(context, bm_node_id):
     return IMPL.bm_node_destroy(context, bm_node_id)
 
 
+def bm_node_destroy_by_node_uuid(context, bm_node_uuid):
+    return IMPL.bm_node_destroy_by_node_uuid(context, bm_node_uuid)
+
+
 def bm_node_update(context, bm_node_id, values):
     return IMPL.bm_node_update(context, bm_node_id, values)
 
diff --git a/nova/virt/baremetal/db/sqlalchemy/api.py b/nova/virt/baremetal/db/sqlalchemy/api.py
index fe281d8..7859c39 100644
--- a/nova/virt/baremetal/db/sqlalchemy/api.py
+++ b/nova/virt/baremetal/db/sqlalchemy/api.py
@@ -237,6 +237,28 @@ def bm_node_destroy(context, bm_node_id):
 
 
 @sqlalchemy_api.require_admin_context
+def bm_node_destroy_by_node_uuid(context, bm_node_uuid):
+    # Delete all interfaces belonging to the node.
+    # Delete physically since these have unique columns.
+    session = db_session.get_session()
+    with session.begin():
+        node = model_query(context, models.BareMetalNode, read_deleted="no").\
+            filter_by(uuid=bm_node_uuid).first()
+        rows = model_query(context, models.BareMetalNode, read_deleted="no").\
+            filter_by(id=node['id']).\
+            update({'deleted': True,
+                    'deleted_at': timeutils.utcnow(),
+                    'updated_at': literal_column('updated_at')})
+
+        model_query(context, models.BareMetalInterface, read_deleted="no").\
+            filter_by(bm_node_id=node['id']).\
+            delete()
+
+        if not rows:
+            raise exception.NodeNotFoundByUUID(node_uuid=bm_node_uuid)
+
+
+@sqlalchemy_api.require_admin_context
 def bm_interface_get(context, if_id):
     result = model_query(context, models.BareMetalInterface,
                          read_deleted="no").\
-- 
1.8.3.1

